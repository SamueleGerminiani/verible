// Copyright 2017-2020 The Verible Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Implementation of VerilogTreeFilter

#include "verilog/CST/verilog_tree_filter.h"

#include <iostream>
#include <memory>
#include <string>

#include "absl/strings/str_cat.h"
#include "absl/strings/string_view.h"
#include "common/text/concrete_syntax_leaf.h"
#include "common/text/concrete_syntax_tree.h"
#include "common/text/symbol.h"
#include "common/text/token_info.h"
#include "common/util/value_saver.h"
#include "verilog/CST/verilog_nonterminals.h"  // for NodeEnumToString
#include "verilog/parser/verilog_parser.h"     // for verilog_symbol_name

namespace verilog {

VerilogTreeFilter::VerilogTreeFilter(const std::vector<FilteringRulePtr> &rules)
    : rules_(rules) {}

void VerilogTreeFilter::Visit(const verible::SyntaxTreeLeaf &leaf) {
  if (MustKeep(leaf)) {
    verible::SymbolPtr new_leaf = std::make_unique<verible::SyntaxTreeLeaf>(
        verible::SyntaxTreeLeaf(leaf));
    subtrees_.push(std::move(new_leaf));
  }
}

void VerilogTreeFilter::Visit(const verible::SyntaxTreeNode &node) {
  context_.push_back(static_cast<NodeEnum>(node.Tag().tag));

  // How many subtrees before visiting the children
  size_t current_number_of_subtrees = subtrees_.size();

  // Visit the children backwards
  for (int i = node.size() - 1; i >= 0; i--) {
    if (node[i]) {
      node[i]->Accept(this);
    }
  }

  // How many subtrees were added by the children
  int increment = subtrees_.size() - current_number_of_subtrees;
  CHECK_GE(increment, 0);

  auto can_keep_result = CanKeep(node);
  if (can_keep_result == CanKeepResult::kYes) {
    // If there are more than 2 subtrees generated by the children, then must
    // also keep the current node as a "separator" between the subtrees
    if (MustKeep(node) || increment >= 2) {
      // copy the current node
      verible::SymbolPtr this_subtree_root =
          verible::MakeTaggedNode(node.Tag().tag);

      // add the subtrees to the current node
      for (size_t i = 0; i < (size_t)increment; i++) {
        CHECK(!subtrees_.empty());
        this_subtree_root =
            verible::ExtendNode(this_subtree_root, subtrees_.top());
        subtrees_.pop();
      }

      // push the current node to the stack
      subtrees_.push(std::move(this_subtree_root));
    }
  } else if (can_keep_result == CanKeepResult::kNo_DeleteSubtree) {
    // throw away the current node and its subtrees
    for (size_t i = 0; i < (size_t)increment; i++) {
      CHECK(!subtrees_.empty());
      subtrees_.pop();
    }
  }
  context_.pop_back();
}

verible::SymbolPtr FilterSymbolsVerilogTree(
    const verible::Symbol &root, const std::vector<FilteringRulePtr> &rules) {
  VerilogTreeFilter filter(rules);
  root.Accept(&filter);
  return filter.GetFilteredTree();
}

}  // namespace verilog
